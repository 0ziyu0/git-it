  Fork a project from GitHub.com and clone it locally.
  
  --------------------------------------------------------------------

  Now you've made a project locally and pushed it to GitHub, but that's
  only half the fun. The other half is working with other people and
  projects.

  When you {bold}fork{/bold} a repository, you're creating a copy of
  it on your GitHub.com account. Forks are used for creating your own
  version of a project or contributing back fixes or features to the
  original project. 
  
  Once a project is forked, you then {bold}clone{/bold} it
  to your computer to work on locally.

  {bold}{cyan}
  Fork{/bold}
  ----{/cyan}

  The project we'll work with is {bold}www.github.com/jlord/patchwork{/bold}. Go
  to that site and click the fork button at the top right. Once the
  fork animation is complete, you've got a copy on your account. Copy 
  your fork's HTTP URL on the right side.
  
  {bold}{cyan}
  Clone a Repospitory{/bold}
  -------------------{/cyan}

  Now, in terminal, clone the repository.

  $ git clone <URL>

  Navigate into that folder

  $ cd ForkedRepoName

  Now you've got a copy of the repository on your computer and it is
  automatically connected to the remote one on your GitHub account.

  {bold}{cyan}
  Connect to the Original Repository/bold}
  ----------------------------------{/cyan}

  But what if the original repository you forked changes? You'll want
  to be able to {bold}pull{/bold} in those updates too. So let's add a remote
  connection to the original repository with its URL.

  You can call this remote connection anything you want, but often
  people use 'upstream'.

  $ git remote add upstream <HTTP URL>
  
  When you've added RR, type `git-it verify`
