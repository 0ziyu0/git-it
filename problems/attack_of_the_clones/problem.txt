  Clone a fork locally and pull any updates.

  --------------------------------------------------------------------

  {bold}{cyan}
  Clone a Repospitory{/bold}
  -------------------{/cyan}

  Now, in terminal, clone the repository.

  $ git clone <URL>

  Navigate into that folder

  $ cd ForkedRepoName

  Now you've got a copy of the repository on your computer and it is
  automatically connected to the remote one on your GitHub account.

  {bold}{cyan}
  Connect to the Original Repository/bold}
  ----------------------------------{/cyan}

  But what if the original repository you forked changes? You'll want
  to be able to {bold}pull{/bold} in those updates too. So let's add a remote
  connection to the original repository with its URL.

  You can call this remote connection anything you want, but often
  people use 'upstream'.

  $ git remote add upstream <HTTP URL>

  {bold}{cyan}
  Pull in Changes{/bold}
  -----------------{/cyan}

  When you are working with someone on a project, you'll both have a copy
  of the repository on your computer and you'll share the {bold}remote
  repository{/bold} on GitHub.com.

  This means you need to stay up to date with each others changes. Before
  you start making changes yourself, you should {bold}pull{/bold} in any changes
  that may have been made by a collaborator. Check if RR has made updates.

  $ git pull origin master

  {red}- dare I add merge a merge conflict to this challenge?{/red}

  Do it again just to see what message it returns when your local copy
  matches the remote copy.

  {yellow}
  **GIT TIPS**
  ------------

  {bold}Pull in changes from a remote{/bold}

  $ git remote add <REMOTENAME> <BRANCH>

  {bold}Copy a repository to your computer{/bold}

  $ git clone <URL>

  {bold}Add remote connections{/bold}

  $ git remote add <REMOTENAME> <URL>

  {bold}View remote connections{/bold}

  $ git remote -v{/yellow}
